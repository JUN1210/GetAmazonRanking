# -*- coding: utf-8 -*-
"""getAmazonRanking.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1G15aFWOkhSjb-PN-blSWmOov9hYVmQVS
"""
"""
!pip install beautifulsoup4
!pip install requests
!pip3 install lxml
!pip install retry
"""

# coding: utf-8
import requests
from bs4 import BeautifulSoup
import urllib
from retry import retry
import re
import pandas as pd
from email import message
import smtplib
import os

#url = "https://www.amazon.co.jp/gp/top-sellers/books" の情報を取得する
uri = 'https://www.amazon.co.jp/'
category = 'books'

#Gmailの認証データ
smtp_host = os.environ["smtp_host"] 
smtp_port = os.environ["smtp_port"] 
from_email = os.environ["from_email"] # 送信元のアドレス
to_email = os.environ["to_email"]  # 送りたい先のアドレス 追加時は,で追加
bcc_email = os.environ["bcc_email"]  #Bccのアドレス追加
username = os.environ["username"] # Gmailのアドレス
password = os.environ["password"] # Gmailのパスワード


def pages():
    pages =[1,2,3,4,5] #取得するRankingの順位を増やしたいときはここを増やす
    urls = []
    for page in pages:
        url = uri + 'gp/bestsellers/' + category + '?pg=' + str(page)    
        urls.append(url)
    return urls
# ?pg=1, ?pg=2 , ..., ?pg=5 で100位までのランキングページにアクセスできます。

#urlsリストのページ情報を取得
@retry(urllib.error.HTTPError, tries=7, delay=1)
def soup_url(urls):
    soups = []
    for url in urls:
        htmltext = requests.get(url).text
        soup = BeautifulSoup(htmltext, "lxml")
        soups.append(soup)
    return soups

# JAN13のチェックデジットを作成する
def checkdigit(code):
    s = str(code)[:12]
    a = 0
    b = 0
    for i in range(0, len(s), 2):
        a += int(s[i])
    for i in range(1, len(s), 2):
        b += int(s[i])
    d = (a + (b * 3)) % 10
    d = 10 - d 
    if d == 10:
        d = 0
    return d

#取得したページの情報から、必要なデータを抜き出す
@retry(urllib.error.HTTPError, tries=7, delay=1)
def get_ISBN(soups):
    df = pd.DataFrame(index=[],columns=["ranking", "title", "author", "jan", "price"])
    for soup in soups:
        for el in soup.find_all("div", class_="zg_itemRow"):
            rank  = el.find("span", class_="zg_rankNumber").string.strip()
            title  = el.find_all("div", class_="p13n-sc-truncate")[0].string.strip()
            author = el.find("a", class_="a-size-small")
            if author:
                author = author.string.strip()
            else:
                author = el.find("span", class_="a-size-small").string.strip()
            if author.isdigit():
                author = el.find("span", class_="a-size-small").string.strip()                

            price = el.find("span", class_="p13n-sc-price")
            if price:
                price = price.string.strip()
            else:
                price = "not defined"

            asin_tag = el.find("a", class_="a-link-normal").get("href")
            asin_list =re.findall('[0-9]{9}.' , str(asin_tag))
            asin = ",".join(asin_list)
            
            jan12 = "978" + asin
            checkd = checkdigit(jan12)
            jan13 = jan12[:-1] + str(checkd)           
#            print("{} {} {} {} {}".format(rank, price, title, author, jan13))
            series = pd.Series([rank, title, author, str(jan13), price], index = df.columns)
            df = df.append(series, ignore_index = True)
    return df

def mail():
    # メールの内容を作成
    msg = message.EmailMessage()
    msg.set_content('Amazon Ranking') # メールの本文
    msg['Subject'] = 'Amazon top 100 Ranking' # 件名
    msg['From'] = from_email # メール送信元
    msg['To'] = to_email #メール送信先
    msg['Bcc'] = bcc_email #bcc送信先

    #添付ファイルを作成する。
    mine={'type':'text','subtype':'comma-separated-values'}
    attach_file={'name':'topsellerBooks.csv','path':'./topsellerBooks.csv'}
    file = open(attach_file['path'],'rb')
    file_read = file.read()
    msg.add_attachment(file_read, maintype=mine['type'],
    subtype=mine['subtype'],filename=attach_file['name'])
    file.close()

    # メールサーバーへアクセス
    server = smtplib.SMTP(smtp_host, smtp_port)
    server.ehlo()
    server.starttls()
    server.ehlo()
    server.login(username, password)
    server.send_message(msg)
    server.quit()

#一連の実行関数

def main():
    urls = pages()
    soups = soup_url(urls)
    ranking_df = get_ISBN(soups)
#    print(ranking_df)        
    ranking_df.to_csv("topsellerBooks.csv", encoding="cp932")
    mail()

if __name__ == '__main__':
    main()
